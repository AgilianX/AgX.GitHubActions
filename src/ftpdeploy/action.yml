name: AgX FTP Deploy
description: "Deploy files using FTP/FTPS protocol"

inputs:
  method:
    type: choice
    description: "Deployment method to use: 'content' (folder) or 'package' (zip archive)"
    options:
      - content
      - package
    default: content
    required: true
  package-path:
    # can omit if deploying from the workspace root (e.g. downloading a build artifact in an empty job)
    # directory example: "publish"  (for folder)
    # archive example: "publish.zip" (for zip)
    description: "Path to the publish directory or zip archive."
    required: false
  server:
    # example: "ftp.mysite.com" or "ftps://ftp.mysite.com"
    description: "FTP server hostname or URL"
    required: true
  port:
    description: "FTP server port"
    required: false
    default: "21"
  username:
    description: "Username for FTP authentication"
    required: true
  password:
    description: "Password for FTP authentication"
    required: true
  remote-path:
    description: "Remote directory path on FTP server (e.g., '/', '/wwwroot')"
    required: false
    default: "/"
  passive-mode:
    type: boolean
    description: "Use passive mode for FTP connections"
    default: true
    required: false
  exclude-patterns:
    description: "File patterns to exclude from upload (comma-separated, e.g., '*.log,temp/*')"
    required: false
  clean-target:
    type: boolean
    description: "Clean up old files on the server that are not part of the new deployment"
    default: false
    required: false
  preserve-patterns:
    description: "File patterns to preserve during cleanup (comma-separated, e.g., '*.db,logs/*,config.json')"
    required: false
  disable-connectivity-tests:
    type: boolean
    description: "Disable FTP connectivity tests (directory and file creation). Use with caution!"
    default: false
    required: false

runs:
  using: "composite"
  steps:
    - name: Analyze path and environment
      shell: pwsh
      run: |
        if ([string]::IsNullOrWhiteSpace("${{ inputs.package-path }}")) {
          $inputPath = "${{ github.workspace }}"
        } else {
          $inputPath = Join-Path "${{ github.workspace }}" "${{ inputs.package-path }}"
        }

        Write-Host "🔍 Path analysis:" -ForegroundColor Cyan
        Write-Host "   • Workspace: `e[36m${{ github.workspace }}`e[0m"
        Write-Host "   • Method: `e[36m${{ inputs.method }}`e[0m"
        Write-Host "   • Server: `e[36m${{ inputs.server }}`e[0m"
        Write-Host "   • Port: `e[36m${{ inputs.port }}`e[0m"
        Write-Host "   • Remote path: `e[36m${{ inputs.remote-path }}`e[0m"
        Write-Host "   • Resolved path: `e[36m$inputPath`e[0m"

        # Store path for subsequent steps
        echo "INPUT_PATH=$inputPath" >> $env:GITHUB_ENV

    - name: Determine deployment source
      shell: pwsh
      run: |
        function Get-PackageSource { param ([string]$InputPath)
            # First check if the specified path exists
            if (Test-Path -Path $InputPath -PathType Leaf) {
                Write-Host "   • Package path: `e[36m$InputPath`e[0m"
                Write-Host "   • Deployment method: 📦 `e[36mzip package`e[0m"
                return @{
                    Path = $InputPath
                    Type = "package"
                }
            } else {
                # Try to find a zip file if package input doesn't include .zip extension
                if (-not $InputPath.EndsWith(".zip")) {
                    $possibleZipPath = Join-Path "${{ github.workspace }}" "${{ inputs.package-path }}.zip"
                    if (Test-Path -Path $possibleZipPath -PathType Leaf) {
                        Write-Host "   • Found zip package: `e[36m$possibleZipPath`e[0m"
                        Write-Host "   • Deployment method: 📦 `e[36mzip package`e[0m"
                        return @{
                            Path = $possibleZipPath
                            Type = "package"
                        }
                    } else {
                        Write-Host "❌ `e[31mPackage file not found at paths:`e[0m"
                        Write-Host "   • $InputPath"
                        Write-Host "   • $possibleZipPath"
                        exit 1
                    }
                } else {
                    Write-Host "❌ `e[31mPackage file not found at path:`e[0m $InputPath"
                    exit 1
                }
            }
        }

        function Get-ContentSource { param ([string]$InputPath)
            if (Test-Path -Path $InputPath -PathType Container) {
                Write-Host "   • Content directory: `e[36m$InputPath`e[0m"
                Write-Host "   • Deployment method: 📁 `e[36mdirectory content`e[0m"
                return @{
                    Path = $InputPath
                    Type = "content"
                }
            } else {
                Write-Host "❌ `e[31mContent directory not found at path:`e[0m $InputPath"
                exit 1
            }
        }

        Write-Host "🚀 Starting deployment preparation..." -ForegroundColor Cyan

        $inputPath = $env:INPUT_PATH
        $result = $null

        if ("${{ inputs.method }}" -eq "package") {
            $result = Get-PackageSource -InputPath $inputPath
        } elseif ("${{ inputs.method }}" -eq "content") {
            $result = Get-ContentSource -InputPath $inputPath
        } else {
            Write-Host "❌ `e[31mInvalid method. Use '`e[33mpackage`e[31m' for zip archive or '`e[33mcontent`e[31m' for directory.`e[0m"
            exit 1
        }

        # Store values for the deployment step
        echo "SOURCE_PATH=$($result.Path)" >> $env:GITHUB_ENV
        echo "SOURCE_TYPE=$($result.Type)" >> $env:GITHUB_ENV

    - name: Extract package if needed
      shell: pwsh
      run: |
        if ($env:SOURCE_TYPE -eq "package") {
            Write-Host "📦 Extracting package for FTP upload..." -ForegroundColor Cyan
            $extractPath = Join-Path $env:TEMP "ftp-extract-$(Get-Date -Format 'yyyyMMddHHmmss')"
            New-Item -ItemType Directory -Path $extractPath -Force | Out-Null

            try {
                Expand-Archive -Path $env:SOURCE_PATH -DestinationPath $extractPath -Force
                Write-Host "   • Extracted to: `e[36m$extractPath`e[0m"
                echo "DEPLOY_PATH=$extractPath" >> $env:GITHUB_ENV
            } catch {
                Write-Host "❌ `e[31mFailed to extract package:`e[0m $($_.Exception.Message)"
                exit 1
            }
        } else {
            echo "DEPLOY_PATH=$env:SOURCE_PATH" >> $env:GITHUB_ENV
        }
    - name: Execute FTP deployment
      shell: pwsh
      run: |
        $scriptPath = Join-Path "${{ github.action_path }}" "Execute-FtpDeployment.ps1"

        $params = @{
            DeployPath = $env:DEPLOY_PATH
            Server = "${{ inputs.server }}"
            Port = [int]"${{ inputs.port }}"
            Username = "${{ inputs.username }}"
            Password = "${{ inputs.password }}"
            RemotePath = "${{ inputs.remote-path }}"
            PassiveMode = if ("${{ inputs.passive-mode }}" -eq "true") { $true } else { $false }
            ExcludePatterns = "${{ inputs.exclude-patterns }}"
            CleanTarget = if ("${{ inputs.clean-target }}" -eq "true") { $true } else { $false }
            PreservePatterns = "${{ inputs.preserve-patterns }}"
            DisableConnectivityTests = if ("${{ inputs.disable-connectivity-tests }}" -eq "true") { $true } else { $false }
        }

        & $scriptPath @params

branding:
  icon: "upload"
  color: "green"
