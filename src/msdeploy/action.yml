name: AgX MSDeploy
description: "Deploy .NET app using Web Deploy (msdeploy.exe)"

inputs:
  method:
    type: choice
    description: "Deployment method to use: 'content' (folder) or 'package' (zip archive)"
    options:
      - content
      - package
    default: content
    required: true
  package-path:
    # can omit if deploying from the workspace root (e.g. downloading a build artifact in an empty new job)
    # directory example: "publish"  (for folder)
    # archive example: "publish.zip" (for zip)
    description: "Path to the publish directory or zip archive."
    required: false
  site:
    # example: "hexacode-003-site2"
    description: "IIS site name on destination server"
    required: true
  server:
    # example: "win6053.site4now.net:8172"
    description: "MSDeploy server"
    required: true
  username:
    description: "Username for MSDeploy authentication"
    required: true
  password:
    description: "Password or token for MSDeploy authentication"
    required: true
  msdeploy-args-override:
    description: "Use different MSDeploy args than the defaults. Excluding source and dest"
    required: false

runs:
  using: "composite"
  steps:
    - name: Analyze path and environment
      shell: pwsh
      run: |
        if ([string]::IsNullOrWhiteSpace("${{ inputs.package-path }}")) {
          $inputPath = "${{ github.workspace }}"
        } else {
          $inputPath = Join-Path "${{ github.workspace }}" ${{ inputs.package-path }}
        }

        Write-Host "üîç Path analysis:" -ForegroundColor Cyan
        Write-Host "   ‚Ä¢ Workspace: `e[36m${{ github.workspace }}`e[0m"
        Write-Host "   ‚Ä¢ Method: `e[36m${{ inputs.method }}`e[0m"
        Write-Host "   ‚Ä¢ Resolved path: `e[36m$inputPath`e[0m"

        # Store path for subsequent steps
        echo "INPUT_PATH=$inputPath" >> $env:GITHUB_ENV

    - name: Determine deployment source
      shell: pwsh
      run: |
        function Get-PackageSource { param ([string]$InputPath)
            # First check if the specified path exists
            if (Test-Path -Path $InputPath -PathType Leaf) {
                Write-Host "   ‚Ä¢ Package path: `e[36m$InputPath`e[0m"
                Write-Host "   ‚Ä¢ Deployment method: üì¶ `e[36mzip package`e[0m"
                return @{
                    Path = $InputPath
                    Source = "package='$InputPath'"
                }
            } else {
                # Try to find a zip file if package input doesn't include .zip extension
                if (-not $InputPath.EndsWith(".zip")) {
                    $possibleZipPath = Join-Path "${{ github.workspace }}" "${{ inputs.package }}.zip"
                    if (Test-Path -Path $possibleZipPath -PathType Leaf) {
                        Write-Host "   ‚Ä¢ Found zip package: `e[36m$possibleZipPath`e[0m"
                        Write-Host "   ‚Ä¢ Deployment method: üì¶ `e[36mzip package`e[0m"
                        return @{
                            Path = $possibleZipPath
                            Source = "package='$possibleZipPath'"
                        }
                    } else {
                        Write-Host "‚ùå `e[31mPackage file not found at paths:`e[0m"
                        Write-Host "   ‚Ä¢ $InputPath"
                        Write-Host "   ‚Ä¢ $possibleZipPath"
                        exit 1
                    }
                } else {
                    Write-Host "‚ùå `e[31mPackage file not found at path:`e[0m $InputPath"
                    exit 1
                }
            }
        }

        function Get-ContentSource { param ([string]$InputPath)
            if (Test-Path -Path $InputPath -PathType Container) {
                Write-Host "   ‚Ä¢ Content directory: `e[36m$InputPath`e[0m"
                Write-Host "   ‚Ä¢ Deployment method: üìÅ `e[36mdirectory content`e[0m"
                return @{
                    Path = $InputPath
                    Source = "contentPath='$InputPath'"
                }
            } else {
                Write-Host "‚ùå `e[31mContent directory not found at path:`e[0m $InputPath"
                exit 1
            }
        }

        Write-Host "üöÄ Starting deployment preparation..." -ForegroundColor Cyan

        $inputPath = $env:INPUT_PATH
        $result = $null

        if ("${{ inputs.method }}" -eq "package") {
            $result = Get-PackageSource -InputPath $inputPath
            $inputPath = $result.Path
            $source = $result.Source
        } elseif ("${{ inputs.method }}" -eq "content") {
            $result = Get-ContentSource -InputPath $inputPath
            $inputPath = $result.Path
            $source = $result.Source
        } else {
            Write-Host "‚ùå `e[31mInvalid method. Use '`e[33mpackage`e[31m' for zip archive or '`e[33mcontent`e[31m' for directory.`e[0m"
            exit 1
        }

        $dest = "contentPath=${{ inputs.site }},computerName=${{ inputs.server }},userName=${{ inputs.username }},password=${{ inputs.password }},authtype='ntlm',includeAcls='False'"

        # Store values for the deployment step
        echo "SOURCE=$source" >> $env:GITHUB_ENV
        echo "DEST=$dest" >> $env:GITHUB_ENV

    - name: Execute MSDeploy
      shell: pwsh
      run: |
        Write-Host "üîß Running `e[36mmsdeploy`e[0m..." -ForegroundColor Green
        $msdeploy = "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe"

        $override = "${{ inputs.msdeploy-args-override }}"
        if (-not [string]::IsNullOrWhiteSpace($override)) {
          Write-Host "‚ö° Using provided msdeploy-args-override" -ForegroundColor Cyan
          $args = $override
        } else {
          $args = @(
            '-verb:sync',
            '-allowUntrusted',
            '-disableLink:AppPoolExtension',
            '-disableLink:ContentExtension',
            '-disableLink:CertificateExtension',
            '-enableRule:AppOffline',
            '-enableRule:DoNotDeleteRule'
          )
        }

        & $msdeploy -source:$env:SOURCE -dest:$env:DEST @args

        if ($LASTEXITCODE -eq 0) {
          Write-Host "‚úÖ Deployment completed successfully." -ForegroundColor Green
        } else {
          Write-Host "‚ùå Deployment failed with exit code $LASTEXITCODE." -ForegroundColor Red
          exit $LASTEXITCODE
        }

branding:
  icon: "upload-cloud"
  color: "blue"
